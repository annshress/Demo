"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import subprocess
from json import loads
from json.decoder import JSONDecodeError
from subprocess import TimeoutExpired
from copy import copy

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from main import secure_conf

# load env vars provided by elasticbeanstalk;
# this was previously in manage.py, but since is to be used by both worker(manage.py) and
# daphne(asgi.py), we put it here.
try:
    if os.environ.get("DJANGO_SETTINGS_MODULE") == "main.prod_settings":
        eb_vars = loads(
            subprocess.run(
                ["sudo", "/opt/elasticbeanstalk/bin/get-config", "environment"],
                stdout=subprocess.PIPE, timeout=1
            ).stdout
        )
        for k, v in eb_vars.items():
            os.environ.setdefault(k, v)
except (JSONDecodeError, TimeoutExpired):
    pass

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "...")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

ASGI_APPLICATION = "main.routing.application"
# Application definition

LOCAL_APPS = [
    'accounts',
    'chat',
    'appointment',
    'shoppingcart',
    'django_mail_admin',
    'emails',
    'invoicemanager',
    'hotel_booking',
    'cleaning',
    'food_delivery',
    'crm',
    'newsletter',
    'class_scheduling',
    'cloudphone',
    'service_booking',
    'formbuilder',
    'esign',
]

# these are the apps company will have permissions into
AUTHORIZED_APPS = copy(LOCAL_APPS)
AUTHORIZED_APPS.remove("accounts")

LOCAL_APPS += [
    "payment"
]

INSTALLED_APPS = [
     'django.contrib.admin',
     'django.contrib.auth',
     'django.contrib.contenttypes',
     'django.contrib.sites',
     'django.contrib.sessions',
     'django.contrib.messages',
     'django.contrib.staticfiles',
     # Third Party Apps here
     'rest_framework',
     'django_rest_passwordreset',
     'channels',
     'celery',
     'django_filters',
     'django_extensions',
     'import_export',
     'easy_pdf',
     'actstream',
     'multiselectfield',
     'phonenumbers',
     'twilio',
     'corsheaders',
     'djstripe',
     'django_elasticsearch_dsl',
     # for social auth
     'rest_auth',
     'allauth',
     'allauth.account',
     'allauth.socialaccount',
     'allauth.socialaccount.providers.google',
     'allauth.socialaccount.providers.microsoft',
     # for two/multi factor auth
     'rest_framework.authtoken',
     'oauth2_provider',
     'deux',

     'simple_history',
] + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # cors middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'main.middlewares.JWTTokenAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'accounts.middleware.SecurityQuestionMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

# django-allauth settings
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ]
    }
}

LOGIN_REDIRECT_URL = "/"
# END django-allauth settings

ELASTICSEARCH_DSL = {
    'default': {
        'hosts': 'localhost:9200'
    },
}
ELASTICSEARCH_DSL_AUTOSYNC = os.environ.get("ELASTICSEARCH_DSL_AUTOSYNC", False)

ROOT_URLCONF = 'main.urls'
AUTH_USER_MODEL = 'accounts.User'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'OPTIONS': {
            'timeout': 20,
        },
    }
}

# import sys
# if 'test' in sys.argv or 'test_coverage' in sys.argv:  # Covers regular testing and django-coverage
#     DATABASES['default']['OPTIONS'] = dict(timeout=60)

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

ADMINS = ()

SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_PORT = 465
# EMAIL_USE_SSL = True

# Using Whyunified's email account

# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST = 'smtp-mail.outlook.com'
# EMAIL_HOST_USER = secure_conf.SENDER_EMAIL
# EMAIL_HOST_PASSWORD = secure_conf.EMAIL_PASSWORD
# SERVER_EMAIL = EMAIL_HOST_USER
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Using sendgrid as email host
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_HOST_USER = 'apikey'
EMAIL_HOST_PASSWORD = os.getenv("SENDGRID_API_KEY")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "noreply...com")

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
SITE_ID = 1

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "..", "www", "static")
STATICFILES_DIRS = (os.path.join(BASE_DIR, "build", "static"), )

IMPORT_EXPORT_USE_TRANSACTIONS = True

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

FIXTURE_DIRS = [
    'fixtures'
]

DEFAULT_BACKEND_ALIAS = 'custom'

DJANGO_MAIL_ADMIN = {
    'BACKENDS': {
        DEFAULT_BACKEND_ALIAS: "emails.backends.CustomEmailBackend",
        "default": "emails.backends.CustomEmailBackend"
    }
}

DATE_TIME_FORMAT = "%Y-%m-%d %H:%M"
DATE_FORMAT = "%Y-%m-%d"
TIME_FORMAT = "%H:%M"

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/tmp/django_cache',
    }
}

TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID", "")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN", "")

CORS_ORIGIN_ALLOW_ALL = True

ACTSTREAM_SETTINGS = {
    "MANAGER": "crm.managers.ActionManager"
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("localhost", 6379)],
        }
    }
}

###########################################################
# PAYMENT GATEWAY SETTINGS
###########################################################

SUBSCRIPTION_TRIAL_DAYS = 7

STRIPE_LIVE_PUBLIC_KEY = os.environ.get("STRIPE_LIVE_PUBLIC_KEY", "<your publishable key>")
STRIPE_LIVE_SECRET_KEY = os.environ.get("STRIPE_LIVE_SECRET_KEY", "<your secret key>")
STRIPE_TEST_PUBLIC_KEY = os.environ.get("STRIPE_TEST_PUBLIC_KEY", "<your test public key>")
STRIPE_TEST_SECRET_KEY = os.environ.get("STRIPE_TEST_SECRET_KEY", "<your test secret key>")
STRIPE_LIVE_MODE = not DEBUG
# Get it from the section in the Stripe dashboard where you added the webhook endpoint
if DEBUG:
    DJSTRIPE_WEBHOOK_SECRET = os.environ.get("TEST_DJSTRIPE_WEBHOOK_SECRET", "<bla test key bla>")
else:
        
        #############
        # TRUNCATED #
        #############


STRIPE_PAID_PLAN_ID = "plan_GGcodiwmiBhksH"

# AUTHORIZE
AUTHORIZE_NET_ENV = "sandbox" if DEBUG else "production"

# PAYPAL
PAYPAL_TEST = DEBUG
if PAYPAL_TEST:
    PAYPAL_OAUTH2_URL = "https://api.sandbox.paypal.com/v1/oauth2/token"
    PAYPAL_ENV = "sandbox"
else:
    PAYPAL_OAUTH2_URL = "https://api.paypal.com/v1/oauth2/token"
    PAYPAL_ENV = "live"

###########################################################
# END PAYMENT GATEWAY SETTINGS
###########################################################

from main.restconf.main import *
from main.celeryconf.main import *
from main.deux import *
