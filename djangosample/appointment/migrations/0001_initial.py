# Generated by Django 2.1.2 on 2019-07-26 17:51

import appointment.models.services
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AppointmentUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField(default=True, verbose_name='Is Active')),
                ('auth_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='appointment_user', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Company')),
            ],
            options={
                'permissions': (('set_permissions', 'Can set permissions to Appointment.Users'), ('reset_permissions', 'Can reset permissions to Appointment.Users')),
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_id', models.CharField(blank=True, max_length=16, unique=True, verbose_name='Booking ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'pending'), (1, 'confirmed'), (2, 'cancelled')], default=0, verbose_name='Status')),
                ('payment', models.PositiveSmallIntegerField(choices=[(0, 'cash')], default=0, verbose_name='Payment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'permissions': (('access_booking', 'Can access Booking Menu'),),
            },
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accept_bookings_prior', models.PositiveSmallIntegerField(default=0, verbose_name='Accept bookings X hours before appointment start time')),
                ('cancel_bookings_prior', models.PositiveSmallIntegerField(default=0, verbose_name='Clients can cancel a booking up to X hours before appointment start time')),
                ('accept_booking_prior_days', models.PositiveSmallIntegerField(default=100, verbose_name='Accept bookings X days ahead')),
                ('tax', models.DecimalField(decimal_places=2, default=10, max_digits=10, verbose_name='Tax percent')),
                ('deposit', models.DecimalField(decimal_places=2, default=15, max_digits=10, verbose_name='Deposit percent')),
                ('terms', models.TextField(blank=True, default='', verbose_name='Terms and conditions')),
                ('client_new_order_email_subject', models.TextField(default='Your Appointment Booking-{uuid} has been received.')),
                ('client_new_order_email', models.TextField(default='\n    Thank you for your booking.\n\n    ID: {uuid}\n    \n    Services\n    {services}\n    \n    Personal details\n    Name: {c_name}\n    Phone: {c_contact}\n    Email: {c_email}\n    \n    This is the price for your booking\n    Price: {price}\n    Tax: {tax}\n    Total: {total}\n    Deposit required to confirm your booking: {deposit}\n    \n    Additional notes:\n    {notes}\n\n    You are free to cancel using given url: {cancel_url}\n\n    Regards,\n\n    {company}@WhyUnified team\n')),
                ('send_client_new_order_email', models.BooleanField(default=False)),
                ('client_payment_confirm_email_subject', models.TextField(default='Payment for Appointment Booking-{uuid} has been received.')),
                ('client_payment_confirm_email', models.TextField(default="\n    Your payment has been received. \n    We've received the payment for your booking and it is now confirmed.\n\n    ID: {uuid}\n\n    If you want to cancel your booking follow next link: {cancel_url}\n\n    Thank you, we will contact you ASAP.\n\n    {company}@WhyUnified team\n")),
                ('send_client_payment_confirm_email', models.BooleanField(default=False)),
                ('client_cancel_email_subject', models.TextField(default='Your Appointment Booking-{uuid} has been cancelled.')),
                ('client_cancel_email', models.TextField(default='\n    Your booking has been cancelled.\n    \n    ID: {uuid}\n\n    See you next time!\n\n    Regards,\n\n    {company}@WhyUnified team\n')),
                ('send_client_cancel_email', models.BooleanField(default=False)),
                ('employee_new_order_email_subject', models.TextField(default='New Appointment Booking-{uuid} has been received.')),
                ('employee_new_order_email', models.TextField(default='\n    New Appointment has been booked.\n\n    ID: {uuid}\n    \n    Services\n    {services}\n    \n    Personal details\n    Name: {c_name}\n    Phone: {c_contact}\n    Email: {c_email}\n    \n    Additional notes:\n    {notes}\n    \n    {company}@WhyUnified team\n')),
                ('send_employee_new_order_email', models.BooleanField(default=False)),
                ('employee_payment_confirm_email_subject', models.TextField(default='Payment for Appointment Booking-{uuid} has been received.')),
                ('employee_payment_confirm_email', models.TextField(default='\n    Payment for Appointment Booking-{uuid} has been received. \n\n    Appointment Booking ID: {uuid}\n\n    {company}@WhyUnified team\n')),
                ('send_employee_payment_confirm_email', models.BooleanField(default=False)),
                ('employee_cancel_email_subject', models.TextField(default='Appointment Booking-{uuid} has been cancelled.')),
                ('employee_cancel_email', models.TextField(default='\n    Appointment Booking-{uuid} has been cancelled.\n\n    Appointment Booking ID: {uuid}\n    \n    {company}@WhyUnified team\n')),
                ('send_employee_cancel_email', models.BooleanField(default=False)),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='appointment_configuration', to='accounts.Company')),
            ],
        ),
        migrations.CreateModel(
            name='CustomDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=datetime.time(9, 30), null=True, verbose_name='start Time')),
                ('end_time', models.TimeField(blank=True, default=datetime.time(18, 30), null=True, verbose_name='end Time')),
                ('start_lunch', models.TimeField(blank=True, default=datetime.time(12, 30), null=True, verbose_name='Start Lunch')),
                ('end_lunch', models.TimeField(blank=True, default=datetime.time(13, 30), null=True, verbose_name='End Lunch Time')),
                ('is_dayoff', models.BooleanField(default=False, verbose_name='Day Off')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.Company')),
                ('employee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.Employee')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=225, verbose_name='Full Name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('ip_address', models.GenericIPAddressField(blank=True, editable=False, null=True, protocol='IPv4', verbose_name='IP address')),
                ('contact', models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator(message="Phone should in the format:'+999999999'.Upto 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone')),
                ('address_one', models.CharField(max_length=1024, null=True, verbose_name='Address 1')),
                ('address_two', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Address 2')),
                ('country', models.CharField(max_length=255, null=True, verbose_name='Country')),
                ('city', models.CharField(max_length=1024, null=True, verbose_name='City')),
                ('zip', models.CharField(blank=True, max_length=16, null=True, verbose_name='Zip')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('administrator', 'administrator'), ('regular', 'regular')], max_length=32, unique=True, verbose_name='Name')),
                ('status', models.BooleanField(default=True, verbose_name='Status')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='adding just to pass default', max_length=200, verbose_name='Name')),
                ('description', models.TextField(default=' dummy description', verbose_name='Descriptoin')),
                ('length', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1, 'Minimum service length is 1')], verbose_name='Service Length')),
                ('before', models.PositiveIntegerField(verbose_name='Before')),
                ('after', models.PositiveIntegerField(verbose_name='After')),
                ('image', models.ImageField(null=True, upload_to=appointment.models.services.service_image_upload)),
                ('price', models.FloatField()),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='accounts.Company')),
                ('employees', models.ManyToManyField(to='accounts.Employee')),
            ],
        ),
        migrations.CreateModel(
            name='ServicesBooking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booked_date', models.DateField(verbose_name='Booked For')),
                ('start_time', models.TimeField(verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='End Time')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Modified')),
                ('reminder_email', models.BooleanField(blank=True, default=False, verbose_name='Reminder Email Sent')),
                ('reminder_sms', models.BooleanField(blank=True, default=False, verbose_name='Reminder SMS Sent')),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_bookings', to='appointment.Booking')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Employee')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appointment.Service')),
            ],
        ),
        migrations.CreateModel(
            name='WorkingTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monday_from', models.TimeField(blank=True, default=datetime.time(9, 30), verbose_name='Monday From')),
                ('monday_to', models.TimeField(blank=True, default=datetime.time(18, 30), verbose_name='Monday To')),
                ('monday_lunch_from', models.TimeField(blank=True, default=datetime.time(12, 30), verbose_name='Monday Lunch From')),
                ('monday_lunch_to', models.TimeField(blank=True, default=datetime.time(13, 30), verbose_name='Monday Lunch To')),
                ('monday_off', models.BooleanField(default=False, verbose_name='Monday Off')),
                ('tuesday_from', models.TimeField(blank=True, default=datetime.time(9, 30), verbose_name='Tuesday From')),
                ('tuesday_to', models.TimeField(blank=True, default=datetime.time(18, 30), verbose_name='Tuesday To')),
                ('tuesday_lunch_from', models.TimeField(blank=True, default=datetime.time(12, 30), verbose_name='Tuesday Lunch From')),
                ('tuesday_lunch_to', models.TimeField(blank=True, default=datetime.time(13, 30), verbose_name='Tuesday Lunch To')),
                ('tuesday_off', models.BooleanField(default=False, verbose_name='Tuesday Off')),
                ('wednesday_from', models.TimeField(blank=True, default=datetime.time(9, 30), verbose_name='Wednesday From')),
                ('wednesday_to', models.TimeField(blank=True, default=datetime.time(18, 30), verbose_name='Wednesday To')),
                ('wednesday_lunch_from', models.TimeField(blank=True, default=datetime.time(12, 30), verbose_name='Wednesday Lunch From')),
                ('wednesday_lunch_to', models.TimeField(blank=True, default=datetime.time(13, 30), verbose_name='Wednesday Lunch To')),
                ('wednesday_off', models.BooleanField(default=False, verbose_name='Wednesday Off')),
                ('thursday_from', models.TimeField(blank=True, default=datetime.time(9, 30), verbose_name='Thursday From')),
                ('thursday_to', models.TimeField(blank=True, default=datetime.time(18, 30), verbose_name='Thursday To')),
                ('thursday_lunch_from', models.TimeField(blank=True, default=datetime.time(12, 30), verbose_name='Thursday Lunch From')),
                ('thursday_lunch_to', models.TimeField(blank=True, default=datetime.time(13, 30), verbose_name='Thursday Lunch To')),
                ('thursday_off', models.BooleanField(default=False, verbose_name='Thursday Off')),
                ('friday_from', models.TimeField(blank=True, default=datetime.time(9, 30), verbose_name='Friday From')),
                ('friday_to', models.TimeField(blank=True, default=datetime.time(18, 30), verbose_name='Friday To')),
                ('friday_lunch_from', models.TimeField(blank=True, default=datetime.time(12, 30), verbose_name='Friday Lunch From')),
                ('friday_lunch_to', models.TimeField(blank=True, default=datetime.time(13, 30), verbose_name='Friday Lunch To')),
                ('friday_off', models.BooleanField(default=False, verbose_name='Friday Off')),
                ('saturday_from', models.TimeField(blank=True, default=datetime.time(9, 30), verbose_name='Saturday From')),
                ('saturday_to', models.TimeField(blank=True, default=datetime.time(18, 30), verbose_name='Saturday To')),
                ('saturday_lunch_from', models.TimeField(blank=True, default=datetime.time(12, 30), verbose_name='Saturday Lunch From')),
                ('saturday_lunch_to', models.TimeField(blank=True, default=datetime.time(13, 30), verbose_name='Saturday Lunch To')),
                ('saturday_off', models.BooleanField(default=False, verbose_name='Saturday Off')),
                ('sunday_from', models.TimeField(blank=True, default=datetime.time(9, 30), verbose_name='Sunday From')),
                ('sunday_to', models.TimeField(blank=True, default=datetime.time(18, 30), verbose_name='Sunday To')),
                ('sunday_lunch_from', models.TimeField(blank=True, default=datetime.time(12, 30), verbose_name='Sunday Lunch From')),
                ('sunday_lunch_to', models.TimeField(blank=True, default=datetime.time(13, 30), verbose_name='Sunday Lunch To')),
                ('sunday_off', models.BooleanField(default=False, verbose_name='Sunday Off')),
                ('company', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.Company')),
                ('employee', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.Employee')),
            ],
        ),
        migrations.AddField(
            model_name='booking',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='appointment.Customer'),
        ),
        migrations.AddField(
            model_name='booking',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.Company'),
        ),
        migrations.AddField(
            model_name='appointmentuser',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appointment.Role'),
        ),
        migrations.AlterUniqueTogether(
            name='servicesbooking',
            unique_together={('employee', 'start_time', 'booked_date')},
        ),
        migrations.AlterUniqueTogether(
            name='customdate',
            unique_together={('employee', 'date'), ('company', 'date')},
        ),
    ]
